// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, created_by, created_at, last_updated_by, last_updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.LastUpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password, created_by, created_at, last_updated_by, last_updated_at FROM users
ORDER BY created_at
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.LastUpdatedBy,
			&i.LastUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postUser = `-- name: PostUser :one
INSERT INTO users (
  name,
  email,
  password,
  created_by,
  last_updated_by
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, name, email, password, created_by, created_at, last_updated_by, last_updated_at
`

type PostUserParams struct {
	Name          string    `json:"name"`
	Email         string    `json:"email"`
	Password      string    `json:"password"`
	CreatedBy     uuid.UUID `json:"created_by"`
	LastUpdatedBy uuid.UUID `json:"last_updated_by"`
}

func (q *Queries) PostUser(ctx context.Context, arg PostUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, postUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.CreatedBy,
		arg.LastUpdatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.LastUpdatedAt,
	)
	return i, err
}

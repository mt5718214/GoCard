// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: followship.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteFollowship = `-- name: DeleteFollowship :exec
DELETE FROM followship
WHERE follower_id = $1
AND topic_id = $2
`

type DeleteFollowshipParams struct {
	FollowerID uuid.NullUUID `json:"follower_id"`
	TopicID    uuid.NullUUID `json:"topic_id"`
}

func (q *Queries) DeleteFollowship(ctx context.Context, arg DeleteFollowshipParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollowship, arg.FollowerID, arg.TopicID)
	return err
}

const postFollowship = `-- name: PostFollowship :one
INSERT INTO followship (
  follower_id,
  topic_id,
  created_by,
  last_updated_by
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, follower_id, topic_id, created_by, created_at, last_updated_by, last_updated_at
`

type PostFollowshipParams struct {
	FollowerID    uuid.NullUUID `json:"follower_id"`
	TopicID       uuid.NullUUID `json:"topic_id"`
	CreatedBy     uuid.UUID     `json:"created_by"`
	LastUpdatedBy uuid.UUID     `json:"last_updated_by"`
}

func (q *Queries) PostFollowship(ctx context.Context, arg PostFollowshipParams) (Followship, error) {
	row := q.db.QueryRowContext(ctx, postFollowship,
		arg.FollowerID,
		arg.TopicID,
		arg.CreatedBy,
		arg.LastUpdatedBy,
	)
	var i Followship
	err := row.Scan(
		&i.ID,
		&i.FollowerID,
		&i.TopicID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.LastUpdatedAt,
	)
	return i, err
}

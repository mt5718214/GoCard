// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: topic.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const postTopics = `-- name: PostTopics :one
INSERT INTO topics (
    topic_name,
    created_by,
    last_updated_by
) VALUES (
    $1,
    $2,
    $3
) RETURNING id
`

type PostTopicsParams struct {
	TopicName     string    `json:"topic_name"`
	CreatedBy     uuid.UUID `json:"created_by"`
	LastUpdatedBy uuid.UUID `json:"last_updated_by"`
}

func (q *Queries) PostTopics(ctx context.Context, arg PostTopicsParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, postTopics, arg.TopicName, arg.CreatedBy, arg.LastUpdatedBy)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateTopic = `-- name: UpdateTopic :one
UPDATE topics 
SET topic_name = $1
WHERE id = $2
RETURNING id, topic_name
`

type UpdateTopicParams struct {
	TopicName string    `json:"topic_name"`
	ID        uuid.UUID `json:"id"`
}

type UpdateTopicRow struct {
	ID        uuid.UUID `json:"id"`
	TopicName string    `json:"topic_name"`
}

func (q *Queries) UpdateTopic(ctx context.Context, arg UpdateTopicParams) (UpdateTopicRow, error) {
	row := q.db.QueryRowContext(ctx, updateTopic, arg.TopicName, arg.ID)
	var i UpdateTopicRow
	err := row.Scan(&i.ID, &i.TopicName)
	return i, err
}
